#nutr <- cbind(nnames, nutr)
# Create shell for edges data with column names
edges <- data.frame(matrix(ncol=7,nrow=0, dimnames=list(NULL, c("from", "to", "strength", "width", "color", "length", "value"))))
edges
for(i in 1:nrow(nutr)) {
# Select each nutrient row, remove missing values
nums <- unlist(nutr[i,])
nums <- nums[!is.na(nums)]
# Find the maximum of each link to adjust the edge length accordingly
maximum <- max(nums)
minimum <- min(nums)
# To normalize the data, we'll need
stddev <- sd(nums)
mean <- mean(nums)
for(j in 1:(ncol(nutr))) {
# Strength is the intersection of:
# i - The nutrient
# j - The crop
str <- nutr[i,j]
# Check for validity / existence of this node
if(!(is.na(str)) && as.numeric(str) > 0) {
# Create a new row with the nutrient information
nr <- nutr[i,]
# The link will come from a nutrient
nr$from <- i+numNR
# The link will lead to a crop
nr$to <- j
# This is the cell connecting [crop,nutrient], how much one contains
nr$strength <- (str / maximum)
#Alternatively, normalize the data point by its nutritional value
#nr$strength <- (str-minimum)/(maximum-minimum)
# Constant for maximum link width
# This will scale strength[0,1] by a scalar factor so
# stronger connections appear thicker
nr$width <- nr$strength*7
# Constant edge color
#nr$color <- "rgba(75, 59, 115,0.6)"
#nr$color <- "rgba(160,160,160,0.8)"
nr$color <- "rgba(62,125,196,0.8)"
# Assign a strength based on the maximum
### NOTE - A better weighting system will have to be applied, as most links are not strong
nr$length <- ((MAX_LEN) - (nr$strength * MAX_LEN)) + MIN_LEN
#if(rownames(nutr)[i] == "Zinc") print(nr$length)
#if(rownames(nr)[i] == "Zinc") print(nr$length)
#print(paste0(nr$from, " ", nr$to,  " ", nr$strength))
newrow <- c(i+numNR, j, (str/maximum), (str/maximum)*7, "rgba(62,125,196,0.8)", ((MAX_LEN) - (nr$strength * MAX_LEN)) + MIN_LEN, str)
#edges %>% add_row(from = as.numeric(i+numNR), to = j, strength = (str/maximum), width = (str/maximum)*7, color = "rgba(62,125,196,0.8)", length = ((MAX_LEN) - (nr$strength * MAX_LEN)) + MIN_LEN)
# Finally, bind this row to the edge collection
#edges <- dplyr::bind_rows(edges, nr)
#edges <- dplyr::bind_rows(edges, newrow)
edges[nrow(edges)+1,] = newrow
}
}
}
print(nutr)
print(edges)
print(nodes)
runApp()
getNodes <- function(country, ctypes, cyears) {
if(is.null(country) || is.null(ctypes) || is.null(cyears)) return(NULL)
# Load data
file_ext <- paste(country, ctypes, cyears, sep="_")
agData <- read.csv("./DATA_INPUTS/Tabular_data_inputs/Afghanistan_ImportsGlobalConstrained_2019.csv")
# List of nutrient names
nnames <- c("Calories", "Protein", "Fat", "Carbohydrates", "Vitamin.C", "Vitamin.A", "Folate", "Calcium", "Iron", "Zinc", "Potassium",
"Dietary.Fiber", "Copper", "Sodium", "Phosphorus", "Thiamin", "Riboflavin", "Niacin", "B6", "Choline",
"Magnesium", "Manganese", "Saturated.FA", "Monounsaturated.FA", "Polyunsaturated.FA", "Omega.3..USDA.only.", "B12..USDA.only.")
nutrients <- as.data.frame(nnames)
nutrients$group = "N"
nutrients <- rename(nutrients, Nutrient = nnames)
#nutrients <- nutrients[order(nutrients$Nutrient),]
# Optional hard-coded nutrient selection
#nutrients <- data.frame(names(agData[12:37]), group="N")
#colnames(nutrients) <- c("Nutrient", "group")
agData$group = "C"
agData$level = 2
# Maximum length of edges
MAX_LEN <- 100
MIN_LEN <- 10
# num of unique crops in data set
numNR <- nrow(agData)
# Assign unique id # to each, for binding to edges
agData$Nutrient = agData$FAO_CropName
agData <- agData %>% rename(id = X)
# Do the same for each nutrient
nutrients$id = 0
nutrients$level = 1
nutrients <- nutrients %>% mutate(id = (numNR+1):(n()+numNR))
# Unique id #s for crop data
agList <- as.list(agData$id)
nutrients <- nutrients[order(nutrients$Nutrient),]
nn <- dplyr::bind_rows(nutrients, agData)
nodes <- data.frame(
id = nn$id,
level = nn$level,
label = nn$Nutrient,
group = nn$group,
font.strokeWidth = 4
)
nutr <- as.data.frame(t(agData %>% select(all_of(nnames))))
colnames(nutr) <- as.list(agData$FAO_CropName)
# Return nodes and nutrient data frame as list
list(nodes=nodes,nutr=nutr)
}
nodesNutr <- getNodes("a", "b", "C")
nodes <- nodesNutr[['nodes']]
nutr <- nodesNutr[['nutr']]
MAX_LEN <- 200
MIN_LEN <- 10
numNR <- nrow(nodes)-nrow(nutr)
# Name the new crop columns
#colnames(nutr) <- as.list(agData$FAO_CropName)
#nutr <- cbind(nnames, nutr)
# Create shell for edges data with column names
edges <- data.frame(matrix(ncol=7,nrow=0, dimnames=list(NULL, c("from", "to", "strength", "width", "color", "length", "value"))))
edges
for(i in 1:nrow(nutr)) {
# Select each nutrient row, remove missing values
nums <- unlist(nutr[i,])
nums <- nums[!is.na(nums)]
# Find the maximum of each link to adjust the edge length accordingly
maximum <- max(nums)
minimum <- min(nums)
# To normalize the data, we'll need
stddev <- sd(nums)
mean <- mean(nums)
for(j in 1:(ncol(nutr))) {
# Strength is the intersection of:
# i - The nutrient
# j - The crop
str <- nutr[i,j]
# Check for validity / existence of this node
if(!(is.na(str)) && as.numeric(str) > 0) {
# Create a new row with the nutrient information
nr <- nutr[i,]
# The link will come from a nutrient
nr$from <- i+numNR
# The link will lead to a crop
nr$to <- j
# This is the cell connecting [crop,nutrient], how much one contains
nr$strength <- (str / maximum)
#Alternatively, normalize the data point by its nutritional value
#nr$strength <- (str-minimum)/(maximum-minimum)
# Constant for maximum link width
# This will scale strength[0,1] by a scalar factor so
# stronger connections appear thicker
nr$width <- nr$strength*7
# Constant edge color
#nr$color <- "rgba(75, 59, 115,0.6)"
#nr$color <- "rgba(160,160,160,0.8)"
nr$color <- "rgba(62,125,196,0.8)"
# Assign a strength based on the maximum
### NOTE - A better weighting system will have to be applied, as most links are not strong
nr$length <- ((MAX_LEN) - (nr$strength * MAX_LEN)) + MIN_LEN
#if(rownames(nutr)[i] == "Zinc") print(nr$length)
#if(rownames(nr)[i] == "Zinc") print(nr$length)
#print(paste0(nr$from, " ", nr$to,  " ", nr$strength))
newrow <- c(i+numNR, j, (str/maximum), (str/maximum)*7, "rgba(62,125,196,0.8)", ((MAX_LEN) - (nr$strength * MAX_LEN)) + MIN_LEN, str)
#edges %>% add_row(from = as.numeric(i+numNR), to = j, strength = (str/maximum), width = (str/maximum)*7, color = "rgba(62,125,196,0.8)", length = ((MAX_LEN) - (nr$strength * MAX_LEN)) + MIN_LEN)
# Finally, bind this row to the edge collection
#edges <- dplyr::bind_rows(edges, nr)
#edges <- dplyr::bind_rows(edges, newrow)
edges[nrow(edges)+1,] = newrow
}
}
}
print(nutr)
print(edges)
print(nodes)
agList <- as.list(agData$id)
getNodes <- function(country, ctypes, cyears) {
if(is.null(country) || is.null(ctypes) || is.null(cyears)) return(NULL)
# Load data
file_ext <- paste(country, ctypes, cyears, sep="_")
agData <- read.csv("./DATA_INPUTS/Tabular_data_inputs/Afghanistan_ImportsGlobalConstrained_2019.csv")
# List of nutrient names
nnames <- c("Calories", "Protein", "Fat", "Carbohydrates", "Vitamin.C", "Vitamin.A", "Folate", "Calcium", "Iron", "Zinc", "Potassium",
"Dietary.Fiber", "Copper", "Sodium", "Phosphorus", "Thiamin", "Riboflavin", "Niacin", "B6", "Choline",
"Magnesium", "Manganese", "Saturated.FA", "Monounsaturated.FA", "Polyunsaturated.FA", "Omega.3..USDA.only.", "B12..USDA.only.")
nutrients <- as.data.frame(nnames)
nutrients$group = "N"
nutrients <- rename(nutrients, Nutrient = nnames)
nutrients <- nutrients[order(nutrients$Nutrient),]
# Optional hard-coded nutrient selection
#nutrients <- data.frame(names(agData[12:37]), group="N")
#colnames(nutrients) <- c("Nutrient", "group")
agData$group = "C"
agData$level = 2
# Maximum length of edges
MAX_LEN <- 100
MIN_LEN <- 10
# num of unique crops in data set
numNR <- nrow(agData)
# Assign unique id # to each, for binding to edges
agData$Nutrient = agData$FAO_CropName
agData <- agData %>% rename(id = X)
# Do the same for each nutrient
nutrients$id = 0
nutrients$level = 1
nutrients <- nutrients %>% mutate(id = (numNR+1):(n()+numNR))
# Unique id #s for crop data
agList <- as.list(agData$id)
agList
nutrients <- nutrients[order(nutrients$Nutrient),]
nn <- dplyr::bind_rows(nutrients, agData)
nodes <- data.frame(
id = nn$id,
level = nn$level,
label = nn$Nutrient,
group = nn$group,
font.strokeWidth = 4
)
nutr <- as.data.frame(t(agData %>% select(all_of(nnames))))
colnames(nutr) <- as.list(agData$FAO_CropName)
# Return nodes and nutrient data frame as list
list(nodes=nodes,nutr=nutr)
}
nodesNutr <- getNodes("a", "b", "C")
nodes <- nodesNutr[['nodes']]
nutr <- nodesNutr[['nutr']]
MAX_LEN <- 200
MIN_LEN <- 10
numNR <- nrow(nodes)-nrow(nutr)
# Name the new crop columns
#colnames(nutr) <- as.list(agData$FAO_CropName)
#nutr <- cbind(nnames, nutr)
# Create shell for edges data with column names
edges <- data.frame(matrix(ncol=7,nrow=0, dimnames=list(NULL, c("from", "to", "strength", "width", "color", "length", "value"))))
edges
for(i in 1:nrow(nutr)) {
# Select each nutrient row, remove missing values
nums <- unlist(nutr[i,])
nums <- nums[!is.na(nums)]
# Find the maximum of each link to adjust the edge length accordingly
maximum <- max(nums)
minimum <- min(nums)
# To normalize the data, we'll need
stddev <- sd(nums)
mean <- mean(nums)
for(j in 1:(ncol(nutr))) {
# Strength is the intersection of:
# i - The nutrient
# j - The crop
str <- nutr[i,j]
# Check for validity / existence of this node
if(!(is.na(str)) && as.numeric(str) > 0) {
# Create a new row with the nutrient information
nr <- nutr[i,]
# The link will come from a nutrient
nr$from <- i+numNR
# The link will lead to a crop
nr$to <- j
# This is the cell connecting [crop,nutrient], how much one contains
nr$strength <- (str / maximum)
#Alternatively, normalize the data point by its nutritional value
#nr$strength <- (str-minimum)/(maximum-minimum)
# Constant for maximum link width
# This will scale strength[0,1] by a scalar factor so
# stronger connections appear thicker
nr$width <- nr$strength*7
# Constant edge color
#nr$color <- "rgba(75, 59, 115,0.6)"
#nr$color <- "rgba(160,160,160,0.8)"
nr$color <- "rgba(62,125,196,0.8)"
# Assign a strength based on the maximum
### NOTE - A better weighting system will have to be applied, as most links are not strong
nr$length <- ((MAX_LEN) - (nr$strength * MAX_LEN)) + MIN_LEN
#if(rownames(nutr)[i] == "Zinc") print(nr$length)
#if(rownames(nr)[i] == "Zinc") print(nr$length)
#print(paste0(nr$from, " ", nr$to,  " ", nr$strength))
newrow <- c(i+numNR, j, (str/maximum), (str/maximum)*7, "rgba(62,125,196,0.8)", ((MAX_LEN) - (nr$strength * MAX_LEN)) + MIN_LEN, str)
#edges %>% add_row(from = as.numeric(i+numNR), to = j, strength = (str/maximum), width = (str/maximum)*7, color = "rgba(62,125,196,0.8)", length = ((MAX_LEN) - (nr$strength * MAX_LEN)) + MIN_LEN)
# Finally, bind this row to the edge collection
#edges <- dplyr::bind_rows(edges, nr)
#edges <- dplyr::bind_rows(edges, newrow)
edges[nrow(edges)+1,] = newrow
}
}
}
print(nutr)
print(edges)
print(agData)
getNodes <- function(country, ctypes, cyears) {
if(is.null(country) || is.null(ctypes) || is.null(cyears)) return(NULL)
# Load data
file_ext <- paste(country, ctypes, cyears, sep="_")
agData <- read.csv("./DATA_INPUTS/Tabular_data_inputs/Afghanistan_ImportsGlobalConstrained_2019.csv")
# List of nutrient names
nnames <- c("Calories", "Protein", "Fat", "Carbohydrates", "Vitamin.C", "Vitamin.A", "Folate", "Calcium", "Iron", "Zinc", "Potassium",
"Dietary.Fiber", "Copper", "Sodium", "Phosphorus", "Thiamin", "Riboflavin", "Niacin", "B6", "Choline",
"Magnesium", "Manganese", "Saturated.FA", "Monounsaturated.FA", "Polyunsaturated.FA", "Omega.3..USDA.only.", "B12..USDA.only.")
nutrients <- as.data.frame(nnames)
nutrients$group = "N"
nutrients <- rename(nutrients, Nutrient = nnames)
nutrients <- nutrients[order(nutrients$Nutrient),]
# Optional hard-coded nutrient selection
#nutrients <- data.frame(names(agData[12:37]), group="N")
#colnames(nutrients) <- c("Nutrient", "group")
agData$group = "C"
agData$level = 2
# Maximum length of edges
MAX_LEN <- 100
MIN_LEN <- 10
# num of unique crops in data set
numNR <- nrow(agData)
# Assign unique id # to each, for binding to edges
agData$Nutrient = agData$FAO_CropName
agData <- agData %>% rename(id = X)
print(agData)
# Do the same for each nutrient
nutrients$id = 0
nutrients$level = 1
nutrients <- nutrients %>% mutate(id = (numNR+1):(n()+numNR))
# Unique id #s for crop data
agList <- as.list(agData$id)
nutrients <- nutrients[order(nutrients$Nutrient),]
nn <- dplyr::bind_rows(nutrients, agData)
nodes <- data.frame(
id = nn$id,
level = nn$level,
label = nn$Nutrient,
group = nn$group,
font.strokeWidth = 4
)
nutr <- as.data.frame(t(agData %>% select(all_of(nnames))))
colnames(nutr) <- as.list(agData$FAO_CropName)
# Return nodes and nutrient data frame as list
list(nodes=nodes,nutr=nutr)
}
nodesNutr <- getNodes("a", "b", "C")
nodes <- nodesNutr[['nodes']]
nutr <- nodesNutr[['nutr']]
MAX_LEN <- 200
MIN_LEN <- 10
numNR <- nrow(nodes)-nrow(nutr)
# Name the new crop columns
#colnames(nutr) <- as.list(agData$FAO_CropName)
#nutr <- cbind(nnames, nutr)
# Create shell for edges data with column names
edges <- data.frame(matrix(ncol=7,nrow=0, dimnames=list(NULL, c("from", "to", "strength", "width", "color", "length", "value"))))
for(i in 1:nrow(nutr)) {
# Select each nutrient row, remove missing values
nums <- unlist(nutr[i,])
nums <- nums[!is.na(nums)]
# Find the maximum of each link to adjust the edge length accordingly
maximum <- max(nums)
minimum <- min(nums)
# To normalize the data, we'll need
stddev <- sd(nums)
mean <- mean(nums)
for(j in 1:(ncol(nutr))) {
# Strength is the intersection of:
# i - The nutrient
# j - The crop
str <- nutr[i,j]
# Check for validity / existence of this node
if(!(is.na(str)) && as.numeric(str) > 0) {
# Create a new row with the nutrient information
nr <- nutr[i,]
# The link will come from a nutrient
nr$from <- i+numNR
# The link will lead to a crop
nr$to <- j
# This is the cell connecting [crop,nutrient], how much one contains
nr$strength <- (str / maximum)
#Alternatively, normalize the data point by its nutritional value
#nr$strength <- (str-minimum)/(maximum-minimum)
# Constant for maximum link width
# This will scale strength[0,1] by a scalar factor so
# stronger connections appear thicker
nr$width <- nr$strength*7
# Constant edge color
#nr$color <- "rgba(75, 59, 115,0.6)"
#nr$color <- "rgba(160,160,160,0.8)"
nr$color <- "rgba(62,125,196,0.8)"
# Assign a strength based on the maximum
### NOTE - A better weighting system will have to be applied, as most links are not strong
nr$length <- ((MAX_LEN) - (nr$strength * MAX_LEN)) + MIN_LEN
#if(rownames(nutr)[i] == "Zinc") print(nr$length)
#if(rownames(nr)[i] == "Zinc") print(nr$length)
#print(paste0(nr$from, " ", nr$to,  " ", nr$strength))
newrow <- c(i+numNR, j, (str/maximum), (str/maximum)*7, "rgba(62,125,196,0.8)", ((MAX_LEN) - (nr$strength * MAX_LEN)) + MIN_LEN, str)
#edges %>% add_row(from = as.numeric(i+numNR), to = j, strength = (str/maximum), width = (str/maximum)*7, color = "rgba(62,125,196,0.8)", length = ((MAX_LEN) - (nr$strength * MAX_LEN)) + MIN_LEN)
# Finally, bind this row to the edge collection
#edges <- dplyr::bind_rows(edges, nr)
#edges <- dplyr::bind_rows(edges, newrow)
edges[nrow(edges)+1,] = newrow
}
}
}
print(nutr)
print(edges)
getNodes <- function(country, ctypes, cyears) {
if(is.null(country) || is.null(ctypes) || is.null(cyears)) return(NULL)
# Load data
file_ext <- paste(country, ctypes, cyears, sep="_")
agData <- read.csv("./DATA_INPUTS/Tabular_data_inputs/Afghanistan_ImportsGlobalConstrained_2019.csv")
# List of nutrient names
nnames <- sort(c("Calories", "Protein", "Fat", "Carbohydrates", "Vitamin.C", "Vitamin.A", "Folate", "Calcium", "Iron", "Zinc", "Potassium",
"Dietary.Fiber", "Copper", "Sodium", "Phosphorus", "Thiamin", "Riboflavin", "Niacin", "B6", "Choline",
"Magnesium", "Manganese", "Saturated.FA", "Monounsaturated.FA", "Polyunsaturated.FA", "Omega.3..USDA.only.", "B12..USDA.only."))
agData[,order(colnames(agData))]
nutrients <- as.data.frame(nnames)
nutrients$group = "N"
nutrients <- rename(nutrients, Nutrient = nnames)
#nutrients <- nutrients[order(nutrients$Nutrient),]
# Optional hard-coded nutrient selection
#nutrients <- data.frame(names(agData[12:37]), group="N")
#colnames(nutrients) <- c("Nutrient", "group")
agData$group = "C"
agData$level = 2
# Maximum length of edges
MAX_LEN <- 100
MIN_LEN <- 10
# num of unique crops in data set
numNR <- nrow(agData)
# Assign unique id # to each, for binding to edges
agData$Nutrient = agData$FAO_CropName
agData <- agData %>% rename(id = X)
print(agData)
# Do the same for each nutrient
nutrients$id = 0
nutrients$level = 1
nutrients <- nutrients %>% mutate(id = (numNR+1):(n()+numNR))
# Unique id #s for crop data
agList <- as.list(agData$id)
nutrients <- nutrients[order(nutrients$Nutrient),]
nn <- dplyr::bind_rows(nutrients, agData)
nodes <- data.frame(
id = nn$id,
level = nn$level,
label = nn$Nutrient,
group = nn$group,
font.strokeWidth = 4
)
nutr <- as.data.frame(t(agData %>% select(all_of(nnames))))
colnames(nutr) <- as.list(agData$FAO_CropName)
# Return nodes and nutrient data frame as list
list(nodes=nodes,nutr=nutr)
}
nodesNutr <- getNodes("a", "b", "C")
nodes <- nodesNutr[['nodes']]
nutr <- nodesNutr[['nutr']]
MAX_LEN <- 200
MIN_LEN <- 10
numNR <- nrow(nodes)-nrow(nutr)
# Name the new crop columns
#colnames(nutr) <- as.list(agData$FAO_CropName)
#nutr <- cbind(nnames, nutr)
# Create shell for edges data with column names
edges <- data.frame(matrix(ncol=7,nrow=0, dimnames=list(NULL, c("from", "to", "strength", "width", "color", "length", "value"))))
for(i in 1:nrow(nutr)) {
# Select each nutrient row, remove missing values
nums <- unlist(nutr[i,])
nums <- nums[!is.na(nums)]
# Find the maximum of each link to adjust the edge length accordingly
maximum <- max(nums)
minimum <- min(nums)
# To normalize the data, we'll need
stddev <- sd(nums)
mean <- mean(nums)
for(j in 1:(ncol(nutr))) {
# Strength is the intersection of:
# i - The nutrient
# j - The crop
str <- nutr[i,j]
# Check for validity / existence of this node
if(!(is.na(str)) && as.numeric(str) > 0) {
# Create a new row with the nutrient information
nr <- nutr[i,]
# The link will come from a nutrient
nr$from <- i+numNR
# The link will lead to a crop
nr$to <- j
# This is the cell connecting [crop,nutrient], how much one contains
nr$strength <- (str / maximum)
#Alternatively, normalize the data point by its nutritional value
#nr$strength <- (str-minimum)/(maximum-minimum)
# Constant for maximum link width
# This will scale strength[0,1] by a scalar factor so
# stronger connections appear thicker
nr$width <- nr$strength*7
# Constant edge color
#nr$color <- "rgba(75, 59, 115,0.6)"
#nr$color <- "rgba(160,160,160,0.8)"
nr$color <- "rgba(62,125,196,0.8)"
# Assign a strength based on the maximum
### NOTE - A better weighting system will have to be applied, as most links are not strong
nr$length <- ((MAX_LEN) - (nr$strength * MAX_LEN)) + MIN_LEN
#if(rownames(nutr)[i] == "Zinc") print(nr$length)
#if(rownames(nr)[i] == "Zinc") print(nr$length)
#print(paste0(nr$from, " ", nr$to,  " ", nr$strength))
newrow <- c(i+numNR, j, (str/maximum), (str/maximum)*7, "rgba(62,125,196,0.8)", ((MAX_LEN) - (nr$strength * MAX_LEN)) + MIN_LEN, str)
#edges %>% add_row(from = as.numeric(i+numNR), to = j, strength = (str/maximum), width = (str/maximum)*7, color = "rgba(62,125,196,0.8)", length = ((MAX_LEN) - (nr$strength * MAX_LEN)) + MIN_LEN)
# Finally, bind this row to the edge collection
#edges <- dplyr::bind_rows(edges, nr)
#edges <- dplyr::bind_rows(edges, newrow)
edges[nrow(edges)+1,] = newrow
}
}
}
print(nutr)
print(edges)
runApp()
runApp()
runApp()
deployApp()
runApp()
deployApp()
warnings()
runApp()
deployApp()
