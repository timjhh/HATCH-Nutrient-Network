nodes$level <- as.numeric(lapply(nodes$level, getLevel))
nodes
#subset <- nodes %>% filter(nodes$level == 1)
#apply(subset)
#realNodes <- getLevel(nodes)
dev.size("px")[1]
agData
nodes
'a'<'c'
'a'>'c'
'z'<='z'
'z'=='z'
'abcd'.substr(1,1)
'abcd'.substr(1,2)
"abcd".substr(1,2)
substr("bcd",1,1)
getLevel <- function(d) {
if(!d %in% nnames) {
letter = substr(d,1,1)
if(letter < 'g') {
2
} else if(letter >= 'g' && letter < 'p') {
3
} else {
4
}
}
}
nodes$level <- as.numeric(lapply(nodes$label, getLevel))
getLevel <- function(d) {
if(!d %in% nnames) {
letter = substr(d,1,1)
if(letter < 'g') {
print(d)
2
} else if(letter >= 'g' && letter < 'p') {
3
} else {
4
}
}
}
nodes$level <- as.numeric(lapply(nodes$label, getLevel))
getLevel <- function(d) {
if(!d %in% nnames) {
letter = substr(d,1,1)
if(letter < 'g') {
print(letter)
2
} else if(letter >= 'g' && letter < 'p') {
3
} else {
4
}
}
}
nodes$level <- as.numeric(lapply(nodes$label, getLevel))
getLevel <- function(d) {
if(!d %in% nnames) {
letter = toLower(substr(d,1,1))
if(letter < 'g') {
print(letter)
2
} else if(letter >= 'g' && letter < 'p') {
3
} else {
4
}
}
}
nodes$level <- as.numeric(lapply(nodes$label, getLevel))
getLevel <- function(d) {
if(!d %in% nnames) {
letter = tolower(substr(d,1,1))
if(letter < 'g') {
print(letter)
2
} else if(letter >= 'g' && letter < 'p') {
3
} else {
4
}
}
}
nodes$level <- as.numeric(lapply(nodes$label, getLevel))
# Take three
getLevel <- function(d) {
if(!d$label %in% nnames) {
letter = tolower(substr(d,1,1))
if(letter < 'g') {
d$level =2
} else if(letter >= 'g' && letter < 'p') {
d$level = 3
} else {
d$level = 4
}
}
}
nodes$level <- as.numeric(lapply(nodes, getLevel))
# Take three
getLevel <- function(d) {
if(!d$label %in% nnames) {
letter = tolower(substr(d,1,1))
if(letter < 'g') {
d$level =2
} else if(letter >= 'g' && letter < 'p') {
d$level = 3
} else {
d$level = 4
}
}
}
nodes$level <- as.numeric(apply(nodes, getLevel))
# Take three
getLevel <- function(d) {
if(!d$label %in% nnames) {
letter = tolower(substr(d,1,1))
if(letter < 'g') {
d$level =2
} else if(letter >= 'g' && letter < 'p') {
d$level = 3
} else {
d$level = 4
}
}
}
nodes$level <- apply(nodes, getLevel)
getLevel <- function(d) {
if(!d$label %in% nnames) {
letter = tolower(substr(d,1,1))
if(letter < 'g') {
d$level =2
} else if(letter >= 'g' && letter < 'p') {
d$level = 3
} else {
d$level = 4
}
}
}
nodes$level <- rapply(nodes, getLevel)
getLevel <- function(d) {
if(!d$label %in% nnames) {
letter = tolower(substr(d,1,1))
if(letter < 'g') {
d$level =2
} else if(letter >= 'g' && letter < 'p') {
d$level = 3
} else {
d$level = 4
}
}
}
nodes$level <- apply(nodes, 1, getLevel)
# Take three
getLevel <- function(d) {
if(!d$label %in% nnames) {
letter = tolower(substr(d,1,1))
if(letter < 'g') {
d$level =2
} else if(letter >= 'g' && letter < 'p') {
d$level = 3
} else {
d$level = 4
}
}
}
nodes <- apply(nodes, 1, getLevel)
nodes <- unlist(apply(nodes, 1, getLevel))
getLevel <- function(d) {
if(!d$label %in% nnames) {
letter = tolower(substr(d,1,1))
if(letter < 'g') {
return 2
# Take three
getLevel <- function(d) {
if(!d$label %in% nnames) {
letter = tolower(substr(d,1,1))
if(letter < 'g') {
return(2)
} else if(letter >= 'g' && letter < 'p') {
return(3)
} else {
return(4)
}
}
}
nodes$level <- apply(nodes, 1, getLevel)
# Take three
getLevel <- function(d) {
if(!d %in% nnames) {
letter = tolower(substr(d,1,1))
if(letter < 'g') {
return(2)
} else if(letter >= 'g' && letter < 'p') {
return(3)
} else {
return(4)
}
}
}
nodes$level <- lapply(nodes$label, 1, getLevel)
getLevel <- function(d) {
if(!d %in% nnames) {
letter = tolower(substr(d,1,1))
if(letter < 'g') {
return(2)
} else if(letter >= 'g' && letter < 'p') {
return(3)
} else {
return(4)
}
}
}
nodes$level <- lapply(nodes$label, getLevel)
nodes
nodes$level <- as.numeric(lapply(nodes$label, getLevel))
nodes$level <- as.numeric(lapply(nodes$label, getLevel)[1])
nodes$level <- lapply(nodes$label, getLevel)
nodes
getLevel <- function(d) {
if(!d %in% nnames) {
letter = tolower(substr(d,1,1))
if(letter < 'g') {
return(2)
} else if(letter >= 'g' && letter < 'p') {
return(3)
} else {
return(4)
}
} else {
return(1)
}
}
nodes$level <- lapply(nodes$label, getLevel)
nodes
nodes$level <- as.numeric(lapply(nodes$label, getLevel))
nodes
runApp('GitHub/HATCH-Nutrient-Network/CODE/HATCH_Shiny')
runApp('GitHub/HATCH-Nutrient-Network/CODE/HATCH_Shiny')
runApp('GitHub/HATCH-Nutrient-Network/CODE/HATCH_Shiny')
runApp('GitHub/HATCH-Nutrient-Network/CODE/HATCH_Shiny')
runApp('GitHub/HATCH-Nutrient-Network/CODE/HATCH_Shiny')
runApp('GitHub/HATCH-Nutrient-Network/CODE/HATCH_Shiny')
runApp('GitHub/HATCH-Nutrient-Network/CODE/HATCH_Shiny')
install.packages('rsconnect')
rsconnect::setAccountInfo(name='nutrinet', token='99CEF87424D8F4DD756DF91296687EBC', secret='Yl+3WaOa/1GM+UlmE4fFV0o8T5zEmuYzqQJfCWMo')
runApp('GitHub/HATCH-Nutrient-Network/CODE/HATCH_Shiny')
rsconnect::deployApp('C:\Users\timjh\OneDrive\Documents\GitHub\HATCH-Nutrient-Network\CODE\HATCH_Shiny')
rsconnect::deployApp('C:\Users\timjh\OneDrive\Documents\GitHub\HATCH-Nutrient-Network\CODE\HATCH_Shiny')
rsconnect::deployApp('C:/Users\timjh\OneDrive\Documents\GitHub\HATCH-Nutrient-Network\CODE\HATCH_Shiny')
rsconnect::deployApp('C:/Users/timjh/OneDrive/Documents/GitHub/HATCH-Nutrient-Network/CODE/HATCH_Shiny')
rsconnect::deployApp('C:/Users/timjh/OneDrive/Documents/GitHub/HATCH-Nutrient-Network/')
rsconnect::deployApp('C:/Users/timjh/OneDrive/Documents/GitHub/HATCH-Nutrient-Network/')
rsconnect::deployApp('C:/Users/timjh/OneDrive/Documents/GitHub/HATCH-Nutrient-Network/Code/')
rsconnect::deployApp('C:/Users/timjh/OneDrive/Documents/GitHub/HATCH-Nutrient-Network/Code/')
rsconnect::deployApp('C:/Users/timjh/OneDrive/Documents/GitHub/HATCH-Nutrient-Network/Code/')
shiny::runApp('GitHub/HATCH-Nutrient-Network/CODE')
runApp()
runApp()
ls
runApp('GitHub/HATCH-Nutrient-Network/CODE')
rsconnect::deployApp('C:/Users/timjh/OneDrive/Documents/GitHub/HATCH-Nutrient-Network/Code/')
shiny::runApp('GitHub/HATCH-Nutrient-Network/CODE')
runApp('GitHub/HATCH-Nutrient-Network/CODE')
runApp('GitHub/HATCH-Nutrient-Network/CODE')
runApp('GitHub/HATCH-Nutrient-Network/CODE')
runApp('GitHub/HATCH-Nutrient-Network/CODE')
shiny::runApp('GitHub/HATCH-Nutrient-Network/CODE')
runApp('GitHub/HATCH-Nutrient-Network/CODE')
runApp('GitHub/HATCH-Nutrient-Network/CODE')
runApp('GitHub/HATCH-Nutrient-Network/CODE')
shiny::runApp('GitHub/HATCH-Nutrient-Network/CODE')
runApp('GitHub/HATCH-Nutrient-Network/CODE')
runApp('GitHub/HATCH-Nutrient-Network/CODE')
runApp('GitHub/HATCH-Nutrient-Network/CODE')
runApp('GitHub/HATCH-Nutrient-Network/CODE')
runApp('GitHub/HATCH-Nutrient-Network/CODE')
runApp('GitHub/HATCH-Nutrient-Network/CODE')
runApp('GitHub/HATCH-Nutrient-Network/CODE')
runApp('GitHub/HATCH-Nutrient-Network/CODE')
runApp('GitHub/HATCH-Nutrient-Network/CODE')
runApp('GitHub/HATCH-Nutrient-Network/CODE')
runApp('GitHub/HATCH-Nutrient-Network/CODE')
runApp('GitHub/HATCH-Nutrient-Network/CODE')
runApp('GitHub/HATCH-Nutrient-Network/CODE')
runApp('GitHub/HATCH-Nutrient-Network/CODE')
runApp('GitHub/HATCH-Nutrient-Network/CODE')
runApp('GitHub/HATCH-Nutrient-Network/CODE')
knitr::opts_chunk$set(echo = TRUE)
library(shiny)
library(ggplot2)
library(tidyverse)
library(dplyr)
library(visNetwork)
agData <- read.csv("../../DATA_INPUTS/Tabular_data_inputs/Algeria_Production_2019.csv")
# List of nutrient names
nnames <- c("Calories", "Protein", "Fat", "Carbohydrates", "Vitamin.C", "Vitamin.A", "Folate", "Calcium", "Iron", "Zinc", "Potassium",
"Dietary.Fiber", "Copper", "Sodium", "Phosphorus", "Thiamin", "Riboflavin", "Niacin", "B6", "Choline",
"Magnesium", "Manganese", "Saturated.FA", "Monounsaturated.FA", "Polyunsaturated.FA", "Omega.3..USDA.only.", "B12..USDA.only.")
nutrients <- as.data.frame(nnames)
nutrients$group = "N"
nutrients <- rename(nutrients, Nutrient = nnames)
# Optional hard-coded nutrient selection
#nutrients <- data.frame(names(agData[12:37]), group="N")
#colnames(nutrients) <- c("Nutrient", "group")
agData$group = "C"
agData$level = 1
# Maximum length of edges
MAX_LEN <- 100
MIN_LEN <- 10
# num of unique crops in data set
numNR <- nrow(agData)
#numNR <- nrow(nodes)-nrow(nutr)
# Assign unique id # to each, for binding to edges
agData$Nutrient = agData$FAO_CropName
agData <- agData %>% rename(id = X)
# Do the same for each nutrient
nutrients$id = 0
nutrients$level = 2
nutrients <- nutrients %>% mutate(id = (numNR+1):(n()+numNR))
# Unique id #s for crop data
agList <- as.list(agData$id)
nn <- dplyr::bind_rows(nutrients, agData)
#Define graph nodes
# nodes <- data.frame(
#   id = nn$id,
#   level = nn$level,
#   label = nn$Nutrient,
#   group = nn$group,
#   font.size = 5,
#   size=10
#
# )
# nodes <- data.frame(
#   id = nn$id,
#   level = nn$level,
#   label = nn$Nutrient,
#   group = nn$group,
#   font.size = 40,
#   size=50
#
# )
nodes <- data.frame(
id = nn$id,
level = nn$level,
label = nn$Nutrient,
group = nn$group
)
nodes
order(nodes)
nodes <- order(nodes)
nodes <- order(nodes)
nodes
agData <- read.csv("../../DATA_INPUTS/Tabular_data_inputs/Algeria_Production_2019.csv")
# List of nutrient names
nnames <- c("Calories", "Protein", "Fat", "Carbohydrates", "Vitamin.C", "Vitamin.A", "Folate", "Calcium", "Iron", "Zinc", "Potassium",
"Dietary.Fiber", "Copper", "Sodium", "Phosphorus", "Thiamin", "Riboflavin", "Niacin", "B6", "Choline",
"Magnesium", "Manganese", "Saturated.FA", "Monounsaturated.FA", "Polyunsaturated.FA", "Omega.3..USDA.only.", "B12..USDA.only.")
nutrients <- as.data.frame(nnames)
nutrients$group = "N"
nutrients <- rename(nutrients, Nutrient = nnames)
# Optional hard-coded nutrient selection
#nutrients <- data.frame(names(agData[12:37]), group="N")
#colnames(nutrients) <- c("Nutrient", "group")
agData$group = "C"
agData$level = 1
# Maximum length of edges
MAX_LEN <- 100
MIN_LEN <- 10
# num of unique crops in data set
numNR <- nrow(agData)
#numNR <- nrow(nodes)-nrow(nutr)
# Assign unique id # to each, for binding to edges
agData$Nutrient = agData$FAO_CropName
agData <- agData %>% rename(id = X)
# Do the same for each nutrient
nutrients$id = 0
nutrients$level = 2
nutrients <- nutrients %>% mutate(id = (numNR+1):(n()+numNR))
# Unique id #s for crop data
agList <- as.list(agData$id)
nn <- dplyr::bind_rows(nutrients, agData)
#Define graph nodes
# nodes <- data.frame(
#   id = nn$id,
#   level = nn$level,
#   label = nn$Nutrient,
#   group = nn$group,
#   font.size = 5,
#   size=10
#
# )
# nodes <- data.frame(
#   id = nn$id,
#   level = nn$level,
#   label = nn$Nutrient,
#   group = nn$group,
#   font.size = 40,
#   size=50
#
# )
nodes <- data.frame(
id = nn$id,
level = nn$level,
label = nn$Nutrient,
group = nn$group
)
nodes
nodes <- nodes[order(label),]
nodes
nodes <- nodes[order(label),]
attach(nodes)
nodes <- nodes[order(label),]
detach(nodes)
nodes
runApp('GitHub/HATCH-Nutrient-Network/CODE')
agData
nutrients
attach(nodes)
nutrients <- nutrients[order(Nutrient),]
nutrients
attach(nutrients)
nutrients <- nutrients[order(Nutrient),]
detach(nutrients)
nutrients
nodes
runApp('GitHub/HATCH-Nutrient-Network/CODE')
runApp('GitHub/HATCH-Nutrient-Network/CODE')
runApp('GitHub/HATCH-Nutrient-Network/CODE')
agData <- read.csv("../../DATA_INPUTS/Tabular_data_inputs/Algeria_Production_2019.csv")
# List of nutrient names
nnames <- c("Calories", "Protein", "Fat", "Carbohydrates", "Vitamin.C", "Vitamin.A", "Folate", "Calcium", "Iron", "Zinc", "Potassium",
"Dietary.Fiber", "Copper", "Sodium", "Phosphorus", "Thiamin", "Riboflavin", "Niacin", "B6", "Choline",
"Magnesium", "Manganese", "Saturated.FA", "Monounsaturated.FA", "Polyunsaturated.FA", "Omega.3..USDA.only.", "B12..USDA.only.")
nutrients <- as.data.frame(nnames)
nutrients$group = "N"
nutrients <- rename(nutrients, Nutrient = nnames)
nutrients <- nutrients[order(nutrients$Nutrient),]
# Optional hard-coded nutrient selection
#nutrients <- data.frame(names(agData[12:37]), group="N")
#colnames(nutrients) <- c("Nutrient", "group")
agData$group = "C"
agData$level = 1
# Maximum length of edges
MAX_LEN <- 100
MIN_LEN <- 10
# num of unique crops in data set
numNR <- nrow(agData)
#numNR <- nrow(nodes)-nrow(nutr)
# Assign unique id # to each, for binding to edges
agData$Nutrient = agData$FAO_CropName
agData <- agData %>% rename(id = X)
# Do the same for each nutrient
nutrients$id = 0
nutrients$level = 2
nutrients <- nutrients %>% mutate(id = (numNR+1):(n()+numNR))
# Unique id #s for crop data
agList <- as.list(agData$id)
nn <- dplyr::bind_rows(nutrients, agData)
#Define graph nodes
# nodes <- data.frame(
#   id = nn$id,
#   level = nn$level,
#   label = nn$Nutrient,
#   group = nn$group,
#   font.size = 5,
#   size=10
#
# )
# nodes <- data.frame(
#   id = nn$id,
#   level = nn$level,
#   label = nn$Nutrient,
#   group = nn$group,
#   font.size = 40,
#   size=50
#
# )
nodes <- data.frame(
id = nn$id,
level = nn$level,
label = nn$Nutrient,
group = nn$group
)
nutrients
nodes
runApp('GitHub/HATCH-Nutrient-Network/CODE')
runApp('GitHub/HATCH-Nutrient-Network/CODE')
runApp('GitHub/HATCH-Nutrient-Network/CODE')
runApp('GitHub/HATCH-Nutrient-Network/CODE')
runApp('GitHub/HATCH-Nutrient-Network/CODE')
deployApp()
rsconnect::setAccountInfo(name='nutrinet', token='E211F4F44A3E0D2AC1E46619AFF6B302', secret='n7A5MWyd0KgSQhBabrmsds0oWsf3ivR4Z1pcBFC6')
rsconnect::setAccountInfo(name='nutrinet', token='E211F4F44A3E0D2AC1E46619AFF6B302', secret='n7A5MWyd0KgSQhBabrmsds0oWsf3ivR4Z1pcBFC6')
library(rsconnect)
deployApp()
ls
dir
pwd
runApp()
runApp()
setwd("~/GitHub/HATCH-Nutrient-Network/CODE")
runApp()
deployApp()
deployApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
