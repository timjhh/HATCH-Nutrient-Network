letter = tolower(substr(d,1,1))
if(letter < 'g') {
d$level =2
} else if(letter >= 'g' && letter < 'p') {
d$level = 3
} else {
d$level = 4
}
}
}
nodes$level <- apply(nodes, getLevel)
getLevel <- function(d) {
if(!d$label %in% nnames) {
letter = tolower(substr(d,1,1))
if(letter < 'g') {
d$level =2
} else if(letter >= 'g' && letter < 'p') {
d$level = 3
} else {
d$level = 4
}
}
}
nodes$level <- rapply(nodes, getLevel)
getLevel <- function(d) {
if(!d$label %in% nnames) {
letter = tolower(substr(d,1,1))
if(letter < 'g') {
d$level =2
} else if(letter >= 'g' && letter < 'p') {
d$level = 3
} else {
d$level = 4
}
}
}
nodes$level <- apply(nodes, 1, getLevel)
# Take three
getLevel <- function(d) {
if(!d$label %in% nnames) {
letter = tolower(substr(d,1,1))
if(letter < 'g') {
d$level =2
} else if(letter >= 'g' && letter < 'p') {
d$level = 3
} else {
d$level = 4
}
}
}
nodes <- apply(nodes, 1, getLevel)
nodes <- unlist(apply(nodes, 1, getLevel))
getLevel <- function(d) {
if(!d$label %in% nnames) {
letter = tolower(substr(d,1,1))
if(letter < 'g') {
return 2
# Take three
getLevel <- function(d) {
if(!d$label %in% nnames) {
letter = tolower(substr(d,1,1))
if(letter < 'g') {
return(2)
} else if(letter >= 'g' && letter < 'p') {
return(3)
} else {
return(4)
}
}
}
nodes$level <- apply(nodes, 1, getLevel)
# Take three
getLevel <- function(d) {
if(!d %in% nnames) {
letter = tolower(substr(d,1,1))
if(letter < 'g') {
return(2)
} else if(letter >= 'g' && letter < 'p') {
return(3)
} else {
return(4)
}
}
}
nodes$level <- lapply(nodes$label, 1, getLevel)
getLevel <- function(d) {
if(!d %in% nnames) {
letter = tolower(substr(d,1,1))
if(letter < 'g') {
return(2)
} else if(letter >= 'g' && letter < 'p') {
return(3)
} else {
return(4)
}
}
}
nodes$level <- lapply(nodes$label, getLevel)
nodes
nodes$level <- as.numeric(lapply(nodes$label, getLevel))
nodes$level <- as.numeric(lapply(nodes$label, getLevel)[1])
nodes$level <- lapply(nodes$label, getLevel)
nodes
getLevel <- function(d) {
if(!d %in% nnames) {
letter = tolower(substr(d,1,1))
if(letter < 'g') {
return(2)
} else if(letter >= 'g' && letter < 'p') {
return(3)
} else {
return(4)
}
} else {
return(1)
}
}
nodes$level <- lapply(nodes$label, getLevel)
nodes
nodes$level <- as.numeric(lapply(nodes$label, getLevel))
nodes
runApp('GitHub/HATCH-Nutrient-Network/CODE/HATCH_Shiny')
runApp('GitHub/HATCH-Nutrient-Network/CODE/HATCH_Shiny')
runApp('GitHub/HATCH-Nutrient-Network/CODE/HATCH_Shiny')
runApp('GitHub/HATCH-Nutrient-Network/CODE/HATCH_Shiny')
runApp('GitHub/HATCH-Nutrient-Network/CODE/HATCH_Shiny')
runApp('GitHub/HATCH-Nutrient-Network/CODE/HATCH_Shiny')
runApp('GitHub/HATCH-Nutrient-Network/CODE/HATCH_Shiny')
install.packages('rsconnect')
rsconnect::setAccountInfo(name='nutrinet', token='99CEF87424D8F4DD756DF91296687EBC', secret='Yl+3WaOa/1GM+UlmE4fFV0o8T5zEmuYzqQJfCWMo')
runApp('GitHub/HATCH-Nutrient-Network/CODE/HATCH_Shiny')
rsconnect::deployApp('C:\Users\timjh\OneDrive\Documents\GitHub\HATCH-Nutrient-Network\CODE\HATCH_Shiny')
rsconnect::deployApp('C:\Users\timjh\OneDrive\Documents\GitHub\HATCH-Nutrient-Network\CODE\HATCH_Shiny')
rsconnect::deployApp('C:/Users\timjh\OneDrive\Documents\GitHub\HATCH-Nutrient-Network\CODE\HATCH_Shiny')
rsconnect::deployApp('C:/Users/timjh/OneDrive/Documents/GitHub/HATCH-Nutrient-Network/CODE/HATCH_Shiny')
rsconnect::deployApp('C:/Users/timjh/OneDrive/Documents/GitHub/HATCH-Nutrient-Network/')
rsconnect::deployApp('C:/Users/timjh/OneDrive/Documents/GitHub/HATCH-Nutrient-Network/')
rsconnect::deployApp('C:/Users/timjh/OneDrive/Documents/GitHub/HATCH-Nutrient-Network/Code/')
rsconnect::deployApp('C:/Users/timjh/OneDrive/Documents/GitHub/HATCH-Nutrient-Network/Code/')
rsconnect::deployApp('C:/Users/timjh/OneDrive/Documents/GitHub/HATCH-Nutrient-Network/Code/')
shiny::runApp('GitHub/HATCH-Nutrient-Network/CODE')
runApp()
runApp()
ls
runApp('GitHub/HATCH-Nutrient-Network/CODE')
rsconnect::deployApp('C:/Users/timjh/OneDrive/Documents/GitHub/HATCH-Nutrient-Network/Code/')
knitr::opts_chunk$set(echo = TRUE)
library(shiny)
library(ggplot2)
library(tidyverse)
library(dplyr)
library(visNetwork)
runApp('GitHub/HATCH-Nutrient-Network/CODE')
runApp('GitHub/HATCH-Nutrient-Network')
runApp()
runApp('GitHub/HATCH-Nutrient-Network')
getNodes <- reactive({
# Load data
file_ext <- paste(input$country, input$ctypes, input$cyears, sep="_")
agData <- read.csv(paste("../DATA_INPUTS/Tabular_data_inputs/",file_ext,".csv",sep=""))
# List of nutrient names
nnames <- c("Calories", "Protein", "Fat", "Carbohydrates", "Vitamin.C", "Vitamin.A", "Folate", "Calcium", "Iron", "Zinc", "Potassium",
"Dietary.Fiber", "Copper", "Sodium", "Phosphorus", "Thiamin", "Riboflavin", "Niacin", "B6", "Choline",
"Magnesium", "Manganese", "Saturated.FA", "Monounsaturated.FA", "Polyunsaturated.FA", "Omega.3..USDA.only.", "B12..USDA.only.")
nutrients <- as.data.frame(nnames)
nutrients$group = "N"
nutrients <- rename(nutrients, Nutrient = nnames)
# Optional hard-coded nutrient selection
#nutrients <- data.frame(names(agData[12:37]), group="N")
#colnames(nutrients) <- c("Nutrient", "group")
agData$group = "C"
agData$level = 2
# Maximum length of edges
MAX_LEN <- 100
MIN_LEN <- 10
# num of unique crops in data set
numNR <- nrow(agData)
#numNR <- nrow(nodes)-nrow(nutr)
# Assign unique id # to each, for binding to edges
agData$Nutrient = agData$FAO_CropName
agData <- agData %>% rename(id = X)
# Do the same for each nutrient
nutrients$id = 0
nutrients$level = 1
nutrients <- nutrients %>% mutate(id = (numNR+1):(n()+numNR))
# Unique id #s for crop data
agList <- as.list(agData$id)
nn <- dplyr::bind_rows(nutrients, agData)
nodes <- data.frame(
id = nn$id,
level = nn$level,
label = nn$Nutrient,
group = nn$group,
font.strokeWidth = 4
)
nutr <- as.data.frame(t(agData %>% select(all_of(nnames))))
colnames(nutr) <- as.list(agData$FAO_CropName)
# Return nodes
c(nodes,nutr)
})
getNodes()
getNodes()[1]
getNodes <- function {
getNodes <- function() {
# Load data
file_ext <- paste(input$country, input$ctypes, input$cyears, sep="_")
agData <- read.csv(paste("../DATA_INPUTS/Tabular_data_inputs/",file_ext,".csv",sep=""))
# List of nutrient names
nnames <- c("Calories", "Protein", "Fat", "Carbohydrates", "Vitamin.C", "Vitamin.A", "Folate", "Calcium", "Iron", "Zinc", "Potassium",
"Dietary.Fiber", "Copper", "Sodium", "Phosphorus", "Thiamin", "Riboflavin", "Niacin", "B6", "Choline",
"Magnesium", "Manganese", "Saturated.FA", "Monounsaturated.FA", "Polyunsaturated.FA", "Omega.3..USDA.only.", "B12..USDA.only.")
nutrients <- as.data.frame(nnames)
nutrients$group = "N"
nutrients <- rename(nutrients, Nutrient = nnames)
# Optional hard-coded nutrient selection
#nutrients <- data.frame(names(agData[12:37]), group="N")
#colnames(nutrients) <- c("Nutrient", "group")
agData$group = "C"
agData$level = 2
# Maximum length of edges
MAX_LEN <- 100
MIN_LEN <- 10
# num of unique crops in data set
numNR <- nrow(agData)
#numNR <- nrow(nodes)-nrow(nutr)
# Assign unique id # to each, for binding to edges
agData$Nutrient = agData$FAO_CropName
agData <- agData %>% rename(id = X)
# Do the same for each nutrient
nutrients$id = 0
nutrients$level = 1
nutrients <- nutrients %>% mutate(id = (numNR+1):(n()+numNR))
# Unique id #s for crop data
agList <- as.list(agData$id)
nn <- dplyr::bind_rows(nutrients, agData)
nodes <- data.frame(
id = nn$id,
level = nn$level,
label = nn$Nutrient,
group = nn$group,
font.strokeWidth = 4
)
nutr <- as.data.frame(t(agData %>% select(all_of(nnames))))
colnames(nutr) <- as.list(agData$FAO_CropName)
# Return nodes
c(nodes,nutr)
}
getNodes()[1]
getNodes <- function() {
# Load data
#file_ext <- paste(input$country, input$ctypes, input$cyears, sep="_")
agData <- read.csv("../DATA_INPUTS/Tabular_data_inputs/Algeria_Production_2019.csv")
#agData <- read.csv(paste("../DATA_INPUTS/Tabular_data_inputs/",file_ext,".csv",sep=""))
# List of nutrient names
nnames <- c("Calories", "Protein", "Fat", "Carbohydrates", "Vitamin.C", "Vitamin.A", "Folate", "Calcium", "Iron", "Zinc", "Potassium",
"Dietary.Fiber", "Copper", "Sodium", "Phosphorus", "Thiamin", "Riboflavin", "Niacin", "B6", "Choline",
"Magnesium", "Manganese", "Saturated.FA", "Monounsaturated.FA", "Polyunsaturated.FA", "Omega.3..USDA.only.", "B12..USDA.only.")
nutrients <- as.data.frame(nnames)
nutrients$group = "N"
nutrients <- rename(nutrients, Nutrient = nnames)
# Optional hard-coded nutrient selection
#nutrients <- data.frame(names(agData[12:37]), group="N")
#colnames(nutrients) <- c("Nutrient", "group")
agData$group = "C"
agData$level = 2
# Maximum length of edges
MAX_LEN <- 100
MIN_LEN <- 10
# num of unique crops in data set
numNR <- nrow(agData)
#numNR <- nrow(nodes)-nrow(nutr)
# Assign unique id # to each, for binding to edges
agData$Nutrient = agData$FAO_CropName
agData <- agData %>% rename(id = X)
# Do the same for each nutrient
nutrients$id = 0
nutrients$level = 1
nutrients <- nutrients %>% mutate(id = (numNR+1):(n()+numNR))
# Unique id #s for crop data
agList <- as.list(agData$id)
nn <- dplyr::bind_rows(nutrients, agData)
nodes <- data.frame(
id = nn$id,
level = nn$level,
label = nn$Nutrient,
group = nn$group,
font.strokeWidth = 4
)
nutr <- as.data.frame(t(agData %>% select(all_of(nnames))))
colnames(nutr) <- as.list(agData$FAO_CropName)
# Return nodes
c(nodes,nutr)
}
getNodes()[1]
getNodes()[2]
getNodes()
getNodes <- function() {
# Load data
#file_ext <- paste(input$country, input$ctypes, input$cyears, sep="_")
agData <- read.csv("../DATA_INPUTS/Tabular_data_inputs/Algeria_Production_2019.csv")
#agData <- read.csv(paste("../DATA_INPUTS/Tabular_data_inputs/",file_ext,".csv",sep=""))
# List of nutrient names
nnames <- c("Calories", "Protein", "Fat", "Carbohydrates", "Vitamin.C", "Vitamin.A", "Folate", "Calcium", "Iron", "Zinc", "Potassium",
"Dietary.Fiber", "Copper", "Sodium", "Phosphorus", "Thiamin", "Riboflavin", "Niacin", "B6", "Choline",
"Magnesium", "Manganese", "Saturated.FA", "Monounsaturated.FA", "Polyunsaturated.FA", "Omega.3..USDA.only.", "B12..USDA.only.")
nutrients <- as.data.frame(nnames)
nutrients$group = "N"
nutrients <- rename(nutrients, Nutrient = nnames)
# Optional hard-coded nutrient selection
#nutrients <- data.frame(names(agData[12:37]), group="N")
#colnames(nutrients) <- c("Nutrient", "group")
agData$group = "C"
agData$level = 2
# Maximum length of edges
MAX_LEN <- 100
MIN_LEN <- 10
# num of unique crops in data set
numNR <- nrow(agData)
#numNR <- nrow(nodes)-nrow(nutr)
# Assign unique id # to each, for binding to edges
agData$Nutrient = agData$FAO_CropName
agData <- agData %>% rename(id = X)
# Do the same for each nutrient
nutrients$id = 0
nutrients$level = 1
nutrients <- nutrients %>% mutate(id = (numNR+1):(n()+numNR))
# Unique id #s for crop data
agList <- as.list(agData$id)
nn <- dplyr::bind_rows(nutrients, agData)
nodes <- data.frame(
id = nn$id,
level = nn$level,
label = nn$Nutrient,
group = nn$group,
font.strokeWidth = 4
)
nutr <- as.data.frame(t(agData %>% select(all_of(nnames))))
colnames(nutr) <- as.list(agData$FAO_CropName)
# Return nodes
list(nodes = nodes,nutr = nutr)
}
getNodes()[['nodes']]
runApp('GitHub/HATCH-Nutrient-Network')
ab <- getNodes()
getNodes <- function() {
# Load data
#file_ext <- paste(input$country, input$ctypes, input$cyears, sep="_")
agData <- read.csv("../DATA_INPUTS/Tabular_data_inputs/Algeria_Production_2019.csv")
#agData <- read.csv(paste("../DATA_INPUTS/Tabular_data_inputs/",file_ext,".csv",sep=""))
# List of nutrient names
nnames <- c("Calories", "Protein", "Fat", "Carbohydrates", "Vitamin.C", "Vitamin.A", "Folate", "Calcium", "Iron", "Zinc", "Potassium",
"Dietary.Fiber", "Copper", "Sodium", "Phosphorus", "Thiamin", "Riboflavin", "Niacin", "B6", "Choline",
"Magnesium", "Manganese", "Saturated.FA", "Monounsaturated.FA", "Polyunsaturated.FA", "Omega.3..USDA.only.", "B12..USDA.only.")
nutrients <- as.data.frame(nnames)
nutrients$group = "N"
nutrients <- rename(nutrients, Nutrient = nnames)
# Optional hard-coded nutrient selection
#nutrients <- data.frame(names(agData[12:37]), group="N")
#colnames(nutrients) <- c("Nutrient", "group")
agData$group = "C"
agData$level = 2
# Maximum length of edges
MAX_LEN <- 100
MIN_LEN <- 10
# num of unique crops in data set
numNR <- nrow(agData)
#numNR <- nrow(nodes)-nrow(nutr)
# Assign unique id # to each, for binding to edges
agData$Nutrient = agData$FAO_CropName
agData <- agData %>% rename(id = X)
# Do the same for each nutrient
nutrients$id = 0
nutrients$level = 1
nutrients <- nutrients %>% mutate(id = (numNR+1):(n()+numNR))
# Unique id #s for crop data
agList <- as.list(agData$id)
nn <- dplyr::bind_rows(nutrients, agData)
nodes <- data.frame(
id = nn$id,
level = nn$level,
label = nn$Nutrient,
group = nn$group,
font.strokeWidth = 4
)
nutr <- as.data.frame(t(agData %>% select(all_of(nnames))))
colnames(nutr) <- as.list(agData$FAO_CropName)
# Return nodes
list(nodes = nodes,nutr = nutr)
}
ab <- getNodes()
ab[['nodes']]
runApp('GitHub/HATCH-Nutrient-Network')
ab[['nutr']]
runApp('GitHub/HATCH-Nutrient-Network')
runApp('GitHub/HATCH-Nutrient-Network')
# Run the application
shinyApp()
# Run the application
shinyApp(server = server)
# Run the application
shinyApp(server = server)
# Run the application
shinyApp(ui = ui, server = server)
runApp('GitHub/HATCH-Nutrient-Network')
runApp('GitHub/HATCH-Nutrient-Network')
abc <- getNutr()
getNodes <- function() {
# Load data
#file_ext <- paste(input$country, input$ctypes, input$cyears, sep="_")
agData <- read.csv("../DATA_INPUTS/Tabular_data_inputs/Algeria_Production_2019.csv")
#agData <- read.csv(paste("../DATA_INPUTS/Tabular_data_inputs/",file_ext,".csv",sep=""))
# List of nutrient names
nnames <- c("Calories", "Protein", "Fat", "Carbohydrates", "Vitamin.C", "Vitamin.A", "Folate", "Calcium", "Iron", "Zinc", "Potassium",
"Dietary.Fiber", "Copper", "Sodium", "Phosphorus", "Thiamin", "Riboflavin", "Niacin", "B6", "Choline",
"Magnesium", "Manganese", "Saturated.FA", "Monounsaturated.FA", "Polyunsaturated.FA", "Omega.3..USDA.only.", "B12..USDA.only.")
nutrients <- as.data.frame(nnames)
nutrients$group = "N"
nutrients <- rename(nutrients, Nutrient = nnames)
# Optional hard-coded nutrient selection
#nutrients <- data.frame(names(agData[12:37]), group="N")
#colnames(nutrients) <- c("Nutrient", "group")
agData$group = "C"
agData$level = 2
# Maximum length of edges
MAX_LEN <- 100
MIN_LEN <- 10
# num of unique crops in data set
numNR <- nrow(agData)
#numNR <- nrow(nodes)-nrow(nutr)
# Assign unique id # to each, for binding to edges
agData$Nutrient = agData$FAO_CropName
agData <- agData %>% rename(id = X)
# Do the same for each nutrient
nutrients$id = 0
nutrients$level = 1
nutrients <- nutrients %>% mutate(id = (numNR+1):(n()+numNR))
# Unique id #s for crop data
agList <- as.list(agData$id)
nn <- dplyr::bind_rows(nutrients, agData)
nodes <- data.frame(
id = nn$id,
level = nn$level,
label = nn$Nutrient,
group = nn$group,
font.strokeWidth = 4
)
nutr <- as.data.frame(t(agData %>% select(all_of(nnames))))
colnames(nutr) <- as.list(agData$FAO_CropName)
# Return nodes
list(nodes = nodes,nutr = nutr)
}
getNutr <- function() {
# Load data
#file_ext <- paste(input$country, input$ctypes, input$cyears, sep="_")
agData <- read.csv("../DATA_INPUTS/Tabular_data_inputs/Algeria_Production_2019.csv")
#agData <- read.csv(paste("../DATA_INPUTS/Tabular_data_inputs/",file_ext,".csv",sep=""))
# List of nutrient names
nnames <- c("Calories", "Protein", "Fat", "Carbohydrates", "Vitamin.C", "Vitamin.A", "Folate", "Calcium", "Iron", "Zinc", "Potassium",
"Dietary.Fiber", "Copper", "Sodium", "Phosphorus", "Thiamin", "Riboflavin", "Niacin", "B6", "Choline",
"Magnesium", "Manganese", "Saturated.FA", "Monounsaturated.FA", "Polyunsaturated.FA", "Omega.3..USDA.only.", "B12..USDA.only.")
nutrients <- as.data.frame(nnames)
nutrients$group = "N"
nutrients <- rename(nutrients, Nutrient = nnames)
# Optional hard-coded nutrient selection
#nutrients <- data.frame(names(agData[12:37]), group="N")
#colnames(nutrients) <- c("Nutrient", "group")
agData$group = "C"
agData$level = 2
# Maximum length of edges
MAX_LEN <- 100
MIN_LEN <- 10
# num of unique crops in data set
numNR <- nrow(agData)
# Assign unique id # to each, for binding to edges
agData$Nutrient = agData$FAO_CropName
agData <- agData %>% rename(id = X)
# Do the same for each nutrient
nutrients$id = 0
nutrients$level = 1
nutrients <- nutrients %>% mutate(id = (numNR+1):(n()+numNR))
# Unique id #s for crop data
agList <- as.list(agData$id)
nn <- dplyr::bind_rows(nutrients, agData)
# Create data frame with nutrients as rows, crops as columns
nutr <- as.data.frame(t(agData %>% select(all_of(nnames))))
colnames(nutr) <- as.list(agData$FAO_CropName)
nutr
}
abc <- getNutr()
ab <- getNodes()
ab[['nutr']]
abc <- getNutr()
ab <- getNodes()
ab[['nutr']]
abc
runApp('GitHub/HATCH-Nutrient-Network/CODE')
runApp('GitHub/HATCH-Nutrient-Network/CODE')
print(file_ext)
runApp('GitHub/HATCH-Nutrient-Network/CODE')
runApp('GitHub/HATCH-Nutrient-Network/CODE')
runApp('GitHub/HATCH-Nutrient-Network/CODE')
runApp('GitHub/HATCH-Nutrient-Network/CODE')
runApp()
runApp('GitHub/HATCH-Nutrient-Network/CODE')
runApp()
runApp()
runApp()
runApp('GitHub/HATCH-Nutrient-Network/CODE')
runApp('GitHub/HATCH-Nutrient-Network/CODE')
runApp()
runApp('GitHub/HATCH-Nutrient-Network/CODE')
runApp('GitHub/HATCH-Nutrient-Network/CODE')
